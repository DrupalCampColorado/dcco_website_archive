<?php
/* $Id: pdfidcard.module,v 1.16 2010/02/11 02:24:50 tutumlum Exp $ */
define('PDFIDCARD_PERM_MANAGE', 'manage idcard');
define('PDFIDCARD_PERM_CREATEOWN', 'create own ID card');
define('PDFIDCARD_PERM_CREATEALL', 'create all ID Cards');
define('PDFIDCARD_BGIMAGE_FILEPATH','pdfidcard_bgimage_filepath');
define('PDFIDCARD_TCPDF_PATH','pdfidcard_tcpdf_path');
define('PDFIDCARD_IMAGES_PATH','pdfidcard_tcpdf_path');

/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/
function pdfidcard_help($path, $arg) {
  $output = '';
  switch ($section) {
    case "admin/modules#description":
      $output = t("Creates printable PDF ID cards for your Users");
      break;
  }
  return $output;
} //function pdfidcard_help


/**
* Valid permissions for this module
* @return array An array of valid permissions for the project module
*/
function pdfidcard_perm() {
  return array(
          PDFIDCARD_PERM_MANAGE, 
          PDFIDCARD_PERM_CREATEOWN, 
          PDFIDCARD_PERM_CREATEALL,
          );
} // function idcard_perm



/**
 * menu hook
 * @return array of menu items
**/
function pdfidcard_menu() {
  $items = array();

  if(!$may_cache){
    $items['idcard/create'] = array(
	  'title' => 'ID Cards',
	  'page callback' => 'pdfidcard_create',
	  'access arguments' => array('access content'),
	  'type' => MENU_CALLBACK,
	);
    $items['admin/build/idcard/templates'] = array(
	  'title' => 'ID Cards',
	  'description' => 'Create Identification card templates',
	  'page callback' => 'pdfidcard_template_page',
	  'access arguments' => array(PDFIDCARD_PERM_MANAGE),
	  'type' => MENU_NORMAL_ITEM,
	);
    $items['admin/settings/pdfidcard'] = array(
      'title' => 'PDF-IDCard',
      'description' => 'Configure the background images folder and the location of TCPDF',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pdfidcard_form_admin_settings'),
      'access arguments' => array(PDFIDCARD_PERM_MANAGE),
      'type' => MENU_NORMAL_ITEM, 
    );
  }
  return $items;
}

function pdfidcard_form_admin_settings(){
  $form['PDFIDCARD_IMAGES_PATH'] = array(
    '#type' => 'textfield',
    '#title' => t('Background image folder'),
    '#description' => t('Name of the folder where the
      template background images will be stored. This will 
      be created within the files directory for this site. 
			'),
    '#default_value' => variable_get('PDFIDCARD_IMAGES_PATH','idcard'),
    '#required' => true,
    );
    //Check to see if the TCPDF Path is correct
  if(!pdfidcard_init()){
    drupal_set_message(t("Could not initialize TCPDF, check the path"));
  }
  $form['PDFIDCARD_TCPDF_PATH'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to TCPDF'),
    '#description' => t('Path to the tcpdf folder. TCPDF must be 
    			configured correctly in order for this module
			    to work properly
			'),
    '#default_value' => variable_get('PDFIDCARD_TCPDF_PATH',drupal_get_path('module', 'pdfidcard')."/tcpdf"),
    '#required' => true,
    );
  $form = system_settings_form($form);
  return $form;
}

function pdfidcard_template_page(){
  $output = pdfidcard_form_showtemplates();
  $output .= drupal_get_form('pdfidcard_form_template');
  return $output;
}

/*
 * Implementation of hook_forms to map multiple form IDs
 * to the same callback function
*/
function pdfidcard_forms($form_id, $args){
/* TODO Your function did not have $args in its signature.
   Any $args[n] values have been converted to $args[n].
   You may need to reduce these indices by one. */
  $forms = array();
  $sql = "SELECT * FROM {pdfidcard_templates}"; 
  $results = db_query($sql);
  while ($result = db_fetch_array($results)){
    $forms[$result['name'] . '_pdfidcard_form_template']['callback'] = 'pdfidcard_form_template';
  }
  return $forms;
} //pdfidcard_forms

function pdfidcard_form_showtemplates(){
  $sql = "SELECT * FROM {pdfidcard_templates}"; 
  $results = db_query($sql);
  $output = "";
    //Create the forms
  while ($result = db_fetch_array($results)){
    $output .= drupal_get_form($result['name'] . '_pdfidcard_form_template', $result);
  }
  return $output;
}

function pdfidcard_form_template(&$form_state, $template = NULL){
  if($template['name']) {
    $fstitle = $template['name'];
    $fieldset = $template['name'];
  }
  else {
    $fstitle = "Add a new template";
    $fieldset = "newtemplate";
  }
  $form['#title'] = $fieldset;
  $form['#attributes']['enctype'] = 'multipart/form-data';
  $form['#validate'][] = 'pdfidcard_form_template_validate';
  $form['#submit'][] = 'pdfidcard_form_template_submit';
  $form['#theme'] = 'pdfidcard_form_template';
  $form[$fieldset] = array (
    '#type' => 'fieldset',
    '#title' => $fstitle,
    '#collapsible' => true,
    '#collapsed' => true,
  );
  
  $form[$fieldset]['name'] = array(
    '#title' => 'Template Name',
    '#description' => 'Create a name for the new Template, 
      spaces are not allowed nor are special characters',
    '#type' => 'textfield',
    '#maxlength' => 30,
    '#size' => 30,
    '#required' => true,
    '#default_value' => $template['name'],
    );
  $form[$fieldset]['pageorient'] = array(
    '#title' => 'Page Orientation',
    '#description' => 'Orientation of the printout',
    '#type' => 'select',
    '#options' => array('P' => 'Portrait', 'L' => 'Landscape'),
    '#default_value' => $template['pageorient'],
    );
  if(!$template['bgimage']) { 
    $form[$fieldset]['bgimage'] = array(
      '#title' => 'Background Image',
      '#type' => 'file',
      '#description' => t('Select a background image
        to use for this template'),
      );
  }
  else {
    $path = file_create_url($template['bgimage']);
    $form[$fieldset]['bgimagepath'] = array(
      '#type' => 'markup',
      '#title' => t('Background Image'),
      '#description' => t(''),
      '#value' => "<div class=\"\">".
        "<a href=\"$path\">".$template['bgimage']."</a>".
        "</div>",
    );
    $form[$fieldset]['bgimagepathvalue'] = array(
      '#type' => 'value',
      '#value' => $template['bgimage'],
    );
    $form[$fieldset]['bgimage'] = array(
      '#title' => 'Background Image',
      '#type' => 'file',
      '#description' => t('Uploading a new image will DELETE 
        the current background image'),
      );
  }
  $form[$fieldset]['pgstyle'] = array(
    '#title' => 'Page Style',
    '#description' => t('Custom = use user supplied height/width')."<br />".
                       t('Image = use dimensions of image')."<br />" ,
    '#type' => 'select',
    '#options' => _pdfidcard_pgstyles(), 
    '#default_value' => $template['pgstyle'],
  );
  $form[$fieldset]['width'] = array(
    '#title' => 'Width',
    '#description' => t('Width in mm'),
    '#type' => 'textfield',
    '#maxlength' => 7,
    '#size' => 10,
    '#default_value' => $template['width'],
  );
  $form[$fieldset]['height'] = array(
    '#title' => 'Height',
    '#description' => t('Height in mm'),
    '#type' => 'textfield',
    '#maxlength' => 7,
    '#size' => 10,
    '#default_value' => $template['height'],
  );
  $doc_link = l(t('TCPDF documentation'),
                $GLOBALS['base_url'] .'/'. 
                variable_get('PDFIDCARD_TCPDF_PATH', 'tcpdf') . 
                "/doc/index.html"
              );
  $examples_link = l(t('TCPDF examples'),
                $GLOBALS['base_url'] .'/'. 
                variable_get('PDFIDCARD_TCPDF_PATH', 'tcpdf') . 
                "/examples/index.php"
              );
  $form[$fieldset]['php_format_code'] = array(
    '#title' => 'PHP Code',
    '#description' => t('Enter TCPDF PHP Code here. For more information
                         consult the !doc_link and !examples_link', 
                         array('!doc_link' => $doc_link, '!examples_link' => $examples_link)) . "<br/>" .
                      t('The following items are available: $pdf(PDF Object)
                         $template (db record array), $account (user object) 
                      ')   
                         ,
    '#type' => 'textarea',
    '#default_value' => $template['php_format_code'],
  );
  if($template){
    $form[$fieldset]['submit'] = array(
      '#type' => 'submit',
      '#value' => t("Save Changes"),
    );
    $form[$fieldset]['delete'] = array(
      '#type' => 'submit',
      '#value' => t("Delete this template"),
    );
    $form[$fieldset]['templateid'] = array(
      '#type' => 'value',
      '#value' => $template['templateid'],
    );
  }
  else {
    $form[$fieldset]['submit'] = array(
      '#type' => 'submit',
      '#value' => t("Create new template"),
    );
  }
  return $form;
}
/*
** Theme the form
*/
function theme_pdfidcard_form_template($form){
    $key = $form['#title'];
    $rows[] = array(
      array(data=>drupal_render($form[$key]['name']),colspan=>2),
      array(data=>drupal_render($form[$key]['pageorient'])),
    );
    if($form[$key]['bgimagepath']){
    $rows[] = array(
      array(data => "<div class=\"form-item\"><label for=\"edit-bgimagepath\">Current Image</label>", colspan=>1),
      array(data => drupal_render($form[$key]['bgimagepath'])."</div>", colspan=>3),
    );
    } 
    $rows[] = array(
      array(data => drupal_render($form[$key]['bgimage']), colspan=>3),
    );
    $rows[] = array(
      drupal_render($form[$key]['pgstyle']),
      drupal_render($form[$key]['height']),
      drupal_render($form[$key]['width']),
    );
    $rows[] = array(
      array(data => drupal_render($form[$key]['php_format_code']), colspan => 3),
    );
    if ($form[$key]['delete']){
      $rows[] = array(
        array(data=>drupal_render($form[$key]['submit']),colspan=>1),
        array(data=>drupal_render($form[$key]['delete']),colspan=>2),
      );
    }
    else {
      $rows[] = array(
        array(data=>drupal_render($form[$key]['submit']),colspan=>3),
      );
    }
    $form[$key]['#children'] = theme('table',$header, $rows);
    return drupal_render($form);
}


/*
** Validates the addtemplate form to check for errors
*/
function pdfidcard_form_template_validate($form, &$form_state){
  if ($form_state['values']['op'] == t("Delete this template")){
    return TRUE;
  }
  if(preg_match('/[^a-zA-Z0-9_]/',$form_state['values']['name'])) {
    form_set_error('name',
                   t('Template name must be alphanumeric or underscores only')
                  );
    return FALSE;
  }
  if ($form_state['values']['op'] != t("Save Changes")){
    $templateid = db_result(db_query("SELECT templateid from {pdfidcard_templates} WHERE name = '%s'", $form_state['values']['name']));
    if($templateid && $templateid != $form_state['values']['templateid']) {
      drupal_set_message($form_state['values']['form_id']);
      form_set_error('name',
                     t('Template name must be unique')
                    );
      return FALSE;
    }
  }

  if($file) {
    //File made it ok but is it the right type?
/*  TODO Modify the validators array to suit your needs.
    This array is used in the revised file_save_upload */
    $validators = array(
      'file_validate_is_image' => array(),
      'file_validate_image_resolution' => array('85x85'),
      'file_validate_size' => array(30 * 1024),
    );

    $file = file_save_upload(file_check_upload, $validators);
    $file->filename = file_munge_filename($file->filename, $extensions = NULL, $alerts = TRUE);
    //use image_get_info which will return exif type data.
    //if it fails then its not an image
    $img_info = image_get_info($file->filepath);
    if ($img_info['extension'] != 'png' && $img_info['extension'] != 'jpg') {
      form_set_error('bgimage', 'Uploaded was not of the type jpg or png');
      return FALSE;
    }
  }
}

/*
 * Delete the Background image from template
*/
function pdfidcard_deletebgimage($templateid){
  $sql = "SELECT bgimage from {pdfidcard_templates} 
            WHERE templateid=%d";
  $filename = db_result(db_query($sql,$templateid));
  if ($filename && !file_delete($filename)){
    return FALSE;
  }
  else {
    return TRUE;
  }
} //pdfidcard_deletebgimage

/*
 * Deletes a template based on the primary key
*/
function pdfidcard_deletetemplate($templateid){
  if(pdfidcard_deletebgimage($templateid)) {
    $sql = "DELETE FROM {pdfidcard_templates} 
          WHERE templateid=%d";
    if(!db_query($sql,$templateid)){
      return FALSE;
    }
    else {
      return TRUE;
    } //db_query
  }
  else {
    return FALSE;
  }// pdfidcard_deletebgimage 
} //pdfidcard_deletetemplate

/*
** Handles submission from the form template
*/
function pdfidcard_form_template_submit($form, &$form_state){
  //print_r($form_state['values']);exit;
  switch ($form_state['values']['op']){
  case t("Delete this template") :
    if (pdfidcard_deletetemplate($form_state['values']['templateid'])){
      drupal_set_message(t("Successfully Deleted ") . $form_state['values']['name'] );
    }
    else {
      drupal_set_message(t("Sorry, the template could not be deleted"));
    }
    break;
  case t("Save Changes") :

/* TODO Modify the validators array to suit your needs.
   This array is used in the revised file_save_upload */
  $validators = array(
    'file_validate_is_image' => array(),
    'file_validate_image_resolution' => array('85x85'),
    'file_validate_size' => array(30 * 1024),
  );

    $file = file_save_upload(file_check_upload, $validators);
    if ($file) {
      //The file uploaded replaces the existing file
      $template_folder = variable_get('PDFIDCARD_IMAGES_PATH','idcard');
      $filename ="";
      $filepath = file_create_path('') . "/" . $template_folder;
      //check the directory for existence and for write perms
      $is_writable = file_check_directory($filepath, 1);
      if($is_writable) {
        if($form_state['values']['bgimagepathvalue']){
          //Delete the old if is it exists
          if(!pdfidcard_deletebgimage($form_state['values']['templateid'])){
            drupal_set_message(t("Could not delete previous bgimage, please remove manually"));
          }
        }
        $file->filename = file_munge_filename($file->filename, $extensions = NULL, $alerts = TRUE);
        $file = file_save_upload($file, $filepath, false);
        //Now check once more to make sure we have a useable image
        if (image_get_info($file->filepath)) {
          $filename = $file->filepath;
          $sql = "UPDATE {pdfidcard_templates} SET
            name = '%s', pageorient = '%s', bgimage = '%s',
            pgstyle = '%s', width = '%d', height = '%d' , 
            php_format_code = '%s'
            WHERE templateid = '%d'";
          db_query($sql, 
            $form_state['values']['name'],
            $form_state['values']['pageorient'],
            $filename,
            $form_state['values']['pgstyle'],
            $form_state['values']['width'],
            $form_state['values']['height'],
            $form_state['values']['php_format_code'],
            $form_state['values']['templateid']
          );
        } //image_get_info
      } //is_writable
    }
    else  {
      $sql = "UPDATE {pdfidcard_templates} SET
          name = '%s', pageorient = '%s', pgstyle = '%s', 
          width = '%d', height = '%d' , php_format_code = '%s' 
          WHERE templateid = '%d'";
      db_query($sql, 
        $form_state['values']['name'],
        $form_state['values']['pageorient'],
        $form_state['values']['pgstyle'],
        $form_state['values']['width'],
        $form_state['values']['height'],
        $form_state['values']['php_format_code'],
        $form_state['values']['templateid']
      );
    }
    break;
  case t("Create new template") :
      //saving or updating
    $template_folder = variable_get('PDFIDCARD_IMAGES_PATH','idcard');
    $filename ="";
    $filepath = file_create_path('') . "/" . $template_folder;
      //check the directory for existence and for write perms
    $is_writable = file_check_directory($filepath, 1);
    if($is_writable) {
     //we're good to go
/* TODO Modify the validators array to suit your needs.
   This array is used in the revised file_save_upload */
  $validators = array(
    'file_validate_is_image' => array(),
    'file_validate_image_resolution' => array('85x85'),
    'file_validate_size' => array(30 * 1024),
  );

      //$file = file_save_upload(file_check_upload, $validators);
      //$file->filename = file_munge_filename($file->filename, $extensions = NULL, $alerts = TRUE);
      //HACK should probably restore the filename munging again at some point
      $file = file_save_upload('bgimage', $validators = array(), $filepath, false);

        //Now check once more to make sure we have a useable image
      if (image_get_info($file->filepath)) {
        $filename = $file->filepath;
      }
    }
      //Create the INSERT statement
    $sql = "INSERT INTO {pdfidcard_templates}
          (templateid, name, pageorient, bgimage, pgstyle, width, height, php_format_code )
          VALUES(
          '', '%s', '%s', '%s', '%s', '%d', '%d', '%s')";
    db_query($sql, 
      $form_state['values']['name'],
      $form_state['values']['pageorient'],
      $filename, 
      $form_state['values']['pgstyle'],
      $form_state['values']['width'],
      $form_state['values']['height'],
      $form_state['values']['php_format_code']
    );
    drupal_set_message(t("Created new template "). $form_state['values']['name']);
    break;
  }
}

/**
* create is an interface to create IDCards for users
**/   
function pdfidcard_create(){

    //Check that we can generate PDFs before we go further
  if(!pdfidcard_init()){
    drupal_set_message(t("PDF Generation is not configured correctly
                        PDFs are unavailable"));
    return false;
  }

  $uid = arg(3);
  $templateid = arg(2);
    //pull in the user object
  global $user;
  if (is_numeric($uid) && ($uid != $user->uid)) {
    $account = user_load(array('uid' => $uid));
  }
  else {
    $account = $user;
  }

  if(!$account){
    drupal_set_message(t("Could not load the user account
                        to create the Identification card")); 
    return false;
  }
   
    //Permission check
  if(
      ($user->uid == $account->uid && user_access(PDFIDCARD_PERM_CREATEOWN))
      ||
      (user_access(PDFIDCARD_PERM_CREATEALL))
     ) {
    //Ok we have permission so now let's grab the name of the template
    //and create the card
    $sql = "SELECT * from {pdfidcard_templates} where templateid='%s'";
    $template = db_fetch_array(db_query($sql, $templateid));
    if (!is_array($template)) {
      drupal_set_message(t("A template must be selected"));
      return false;
    }
    $filename = strtr(strip_tags($account->name), " .,?!&#", "_______");
    $pdf = theme('pdfidcard_pdf', $template, $filename);
  }
  else {
    return "Access denied";
  }


} //function pdfidcard_createpage

/**
** implementation of hook_theme
*/
function pdfidcard_theme() {
  return array(
  	'pdfidcard_pdf' => array(
  		'arguments' => array('template')
  	),
  	'pdfidcard_addpage' => array(
  		'arguments' => array('pdf', 'template', 'account')
  	),
  );
}

/*
** theme the creation of the PDF object, 
** $template = array of values containing the width, height, pagestyle, etc. 
*/
function theme_pdfidcard_pdf($template, $filename){

  //Determine the pagestyle to use
  switch ($template['pgstyle']) {
    case 'custom':
        //We use the h/w from the user settings
      $pgstyle = array($template['$height'], $template['$width']);
      break;

    case 'image':
        //On image pgstyle we pull the height width from the image
      $img_info = image_get_info($template['bgimage']);
      if ($img_info) {
        //Now convert pixels to mm at 72 dpi
        $heightmm = $img_info['height'] * 25.4 / 72;
        $widthmm = $img_info['width']  * 25.4 / 72;
        $pgstyle = array($heightmm, $widthmm);
      }
      break;

    default:
      $pgstyle = $template['pgstyle'];
  }
  if($template['pageorient'] == 'P' || $template['pageorient'] == 'L' ){
      $pageorient = $template['pageorient'];
  }
  else {
      $pageorient = 'L';
  }

  $pdf = new PDFIDCARD($pageorient,'mm',$pgstyle);
  $pdf->Open();
  if($template['bgimage']){
    $pdf->bgimage = $template['bgimage'];
  }
    
    //Set Margins to zero (Left, Top, Right) bottom is included in footer
  $pdf->SetMargins(0,0,0);
    //Prevent header and footer from being printed
  $pdf->setPrintHeader(true);
  $pdf->setPrintFooter(false);
    //Turn off auto page breaks
  $pdf->SetAutoPageBreak(false);
    //Return the PDF object
  $pdf->AddPage();
  eval($template['php_format_code']);
    //Return the PDF object
  $pdf->Output($filename . ".pdf","I");
  return $pdf;
}

/**
* Implements hook_user to add the "Create ID card link to the bottom"
**/
function pdfidcard_user($op, &$edit, &$account, $category = NULL){
  switch($op) {
  case 'view':
      //viewing the user account
    global $user;
    if ( 
        ($user->uid == $account->uid && user_access(PDFIDCARD_PERM_CREATEOWN))
        ||
        ($user->uid != $account->uid && user_access(PDFIDCARD_PERM_CREATEALL))
       ) 
    {
      /* if there is only one template we'll just create a hyperlink
       * otherwise we'll create a dropdown form
      */
      $row_count = db_result(db_query("SELECT COUNT(templateid) FROM {pdfidcard_templates}"));
      $results = db_query("SELECT templateid, name FROM {pdfidcard_templates}");
      if ($row_count == 1) {
        //Only one template so create a single link to it
        $result = db_fetch_array($results);
        $form = array(
          '#value' => l(t("Create !name Card", array('!name' => $result['name'])),
                    "idcard/create/".$result['templateid']."/".$account->uid),
          '#weight' => 50,
        );
        $account->content['ID Cards'] = $form;
      }
      if($row_count > 1) {
        $links[NULL] = 'Select a Card';
        while ($result = db_fetch_array($results)) {
            $url = url('idcard/create/'.$result['templateid']."/".$account->uid);
            $links[$url] = $result['name'];
        }
        $formname = 'cardselect';
        $form[$formname] = array(
            '#type' => 'select',
            '#name' => $formname,
            '#id' => $formname,
            '#title' => t('Select a card'),
            '#options' => $links,
            '#description' => '',
            '#multiple' => FALSE,
            '#attributes' => array('onChange' => "top.location.href=document.getElementById('$formname').options[document.getElementById('$formname').selectedIndex].value"),
        );
        $account->content['ID Cards'] = $form;
      }
    }
    break;
  }
}

/*
 * Returns list of available PG Styles
*/
function _pdfidcard_pgstyles(){
  //If you add to this list ensure that TCPDF recognizes it
  //OR you write code to handle the page size in theme_pdfidcard_page
  $pgstyles = array();
  $pgstyles['custom'] = 'Custom';
  $pgstyles['image'] = 'Image';
  $pgstyles['4A0'] = '4A0';
  $pgstyles['2A0'] = '2A0';
  $pgstyles['A0'] = 'A0';
  $pgstyles['A1'] = 'A1';
  $pgstyles['A2'] = 'A2';
  $pgstyles['A3'] = 'A3';
  $pgstyles['A4'] = 'A4';
  $pgstyles['A5'] = 'A5';
  $pgstyles['A6'] = 'A6';
  $pgstyles['A7'] = 'A7';
  $pgstyles['A8'] = 'A8';
  $pgstyles['A9'] = 'A9';
  $pgstyles['A10'] = 'A10';
  $pgstyles['B0'] = 'B0';
  $pgstyles['B1'] = 'B1';
  $pgstyles['B2'] = 'B2';
  $pgstyles['B3'] = 'B3';
  $pgstyles['B4'] = 'B4';
  $pgstyles['B5'] = 'B5';
  $pgstyles['B6'] = 'B6';
  $pgstyles['B7'] = 'B7';
  $pgstyles['B8'] = 'B8';
  $pgstyles['B9'] = 'B9';
  $pgstyles['B10'] = 'B10';
  $pgstyles['C0'] = 'C0';
  $pgstyles['C1'] = 'C1';
  $pgstyles['C2'] = 'C2';
  $pgstyles['C3'] = 'C3';
  $pgstyles['C4'] = 'C4';
  $pgstyles['C5'] = 'C5';
  $pgstyles['C6'] = 'C6';
  $pgstyles['C7'] = 'C7';
  $pgstyles['C8'] = 'C8';
  $pgstyles['C9'] = 'C9';
  $pgstyles['C10'] = 'C10';
  $pgstyles['RA0'] = 'RA0';
  $pgstyles['RA1'] = 'RA1';
  $pgstyles['RA2'] = 'RA2';
  $pgstyles['RA3'] = 'RA3';
  $pgstyles['RA4'] = 'RA4';
  $pgstyles['SRA0'] = 'SRA0';
  $pgstyles['SRA1'] = 'SRA1';
  $pgstyles['SRA2'] = 'SRA2';
  $pgstyles['SRA3'] = 'SRA3';
  $pgstyles['SRA4'] = 'SRA4';
  $pgstyles['LETTER'] = 'LETTER';
  $pgstyles['LEGAL'] = 'LEGAL';
  $pgstyles['EXECUTIVE'] = 'EXECUTIVE';
  $pgstyles['FOLIO'] = 'FOLIO';
  return $pgstyles;
} //pdfidcard_pgstyles

/*
** Initializes TCPDF, returns true for A-OK, returns false if no tcpdf
*/
function pdfidcard_init(){
  $tcpdf_path = variable_get('PDFIDCARD_TCPDF_PATH','');
  $tcpdf_file = $tcpdf_path .'/tcpdf.php';
  if (file_exists($tcpdf_file)) {
    define('FPDF_FONTPATH',$tcpdf_path.'/fonts/');
    require_once($tcpdf_file);
    //Extend the TCPDF class to override defult header
    if (!class_exists("PDFIDCARD")){
    class PDFIDCARD extends TCPDF {
    	public function Header() {
        $this->Image($this->bgimage, 0, 0);
    	}
    }
    }
    return true;
  }
  else {
    return false;
  }
} //function pdfidcard_init
